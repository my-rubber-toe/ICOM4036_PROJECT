
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'EQUALS INT KEYWORD QUOTE VARNAMEexpression : KEYWORDstatement : VARNAME EQUALS QUOTE VARNAME QUOTEstatement : expressionexpression : INTexpression : VARNAME'
    
_lr_action_items = {'KEYWORD':([0,],[2,]),'INT':([0,],[3,]),'VARNAME':([0,],[4,]),'$end':([1,2,3,4,],[0,-1,-4,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> KEYWORD','expression',1,'p_expression_keyword','lexer.py',45),
  ('statement -> VARNAME EQUALS QUOTE VARNAME QUOTE','statement',5,'p_statement_assign','lexer.py',50),
  ('statement -> expression','statement',1,'p_statement_expr','lexer.py',55),
  ('expression -> INT','expression',1,'p_expression_int','lexer.py',60),
  ('expression -> VARNAME','expression',1,'p_expression_varname','lexer.py',65),
]
